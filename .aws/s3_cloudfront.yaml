AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to provision an S3 bucket and a CloudFront distribution
  for hosting a React SPA, with optional custom domain name support.

Parameters:
  BucketName:
    Type: String
    Description: Name for the S3 Bucket that will host SPA content
    Default: ''

  DomainName:
    Type: String
    Description: (Optional) Your custom domain name, e.g., 'www.example.com'
    Default: ''

  AcmCertificateArn:
    Type: String
    Description: (Optional) ACM Certificate ARN in us-west-2 for HTTPS on your custom domain
    Default: ''

Conditions:
  # True if a custom domain name is provided
  UseCustomDomain: 
    !Not [ !Equals [ !Ref DomainName, '' ] ]

Resources:
  # S3 Bucket
  SpaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # CloudFront Origin Access Identity (OAI)
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for accessing S3 bucket: ${BucketName}"

  # Bucket Policy to allow CloudFront OAI to read objects
  SpaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SpaBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontRead
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub "${SpaBucket.Arn}/*"

  # CloudFront Distribution
  SpaCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: !Ref BucketName
            DomainName: !GetAtt SpaBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        DefaultCacheBehavior:
          TargetOriginId: !Ref BucketName
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          DefaultTTL: 86400
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        # Conditionally set Aliases if you have a custom domain
        Aliases: !If 
          - UseCustomDomain
          - [ !Ref DomainName ]
          - []
        # Conditionally set the custom SSL certificate
        ViewerCertificate: !If
          - UseCustomDomain
          - 
            AcmCertificateArn: !Ref AcmCertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2019
          - !Ref "AWS::NoValue"

Outputs:
  CloudFrontDomainName:
    Description: The domain name of the CloudFront distribution
    Value: !GetAtt SpaCloudFrontDistribution.DomainName

  S3BucketName:
    Description: The name of the S3 bucket hosting your SPA
    Value: !Ref SpaBucket
